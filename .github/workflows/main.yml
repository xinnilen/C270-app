name: CI/CD Pipeline

on:
  push:
    branches:
      - main   # Trigger pipeline on push to the 'main' branch
  pull_request:
    branches:
      - main   # Trigger pipeline on pull request to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
        
      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # You can change this to your preferred Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          cd app  # Navigate to the 'app' subdirectory where package.json is located
          npm install  # Install project dependencies

      # Step 4: Run tests
      - name: Run tests
        run: |
          cd app  # Ensure we're in the correct directory
          npm test  # Run tests using the testing framework defined in package.json

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures that the deploy step only runs after the build step is successful

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # You can change this to your preferred Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          cd app  # Navigate to the 'app' subdirectory
          npm install  # Install dependencies for production deployment

      # Step 4: Deploy (this can be customized to your deployment process)
      - name: Deploy to Production
        run: |
          # For example, deploying to a server using SSH
          ssh user@your-server "cd /path/to/your/project && git pull origin main && npm install && pm2 restart your-app"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
